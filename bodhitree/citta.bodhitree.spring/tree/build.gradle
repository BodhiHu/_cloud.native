
/** Cmmon Settings: TODO move to a common place ( plugin ? ) ************************/

group = 'bodhitree'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot' 
apply plugin: 'io.spring.dependency-management' 
apply plugin: 'com.palantir.docker'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

/*************************************************************************************/

def remoteDebugArgs = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"

bootJar {
    baseName = 'DodhiTree-tree'
    version = '0.0.1'
}
bootRun {
    jvmArgs = [ remoteDebugArgs ]
}

dependencies {

    compile("org.springframework:spring-aop:${project.springVersion}")
    compile("org.springframework:spring-beans:${project.springVersion}")
    compile("org.springframework:spring-context:${project.springVersion}")
    compile("org.springframework:spring-core:${project.springVersion}")
    compile("org.springframework:spring-expression:${project.springVersion}")
    compile("org.springframework:spring-jcl:${project.springVersion}")
    compile("org.springframework:spring-test:${project.springVersion}")
    compile("org.springframework:spring-tx:${project.springVersion}")
    compile("org.springframework:spring-web:${project.springVersion}")
    compile("org.springframework:spring-webmvc:${project.springVersion}")

    compile("org.springframework.boot:spring-boot-devtools:${project.springBootDevtoolsVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${project.springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${project.springBootVersion}")

    compile("org.springframework.data:spring-data-commons:${project.springDataCommonsVersion}")
    compile("org.springframework.data:spring-data-mongodb:${project.spingDataMongodbVersion}")

    compile("org.mongodb:mongodb-driver-sync:${project.mongodbDriverVersion}")
    compile("org.mongodb:mongodb-driver-core:${project.mongodbDriverVersion}")
    compile("org.mongodb:bson:${project.mongodbDriverVersion}")

    compile("io.jsonwebtoken:jjwt-api:0.10.5")
    runtime("io.jsonwebtoken:jjwt-impl:0.10.5", "io.jsonwebtoken:jjwt-jackson:0.10.5")
    compile("commons-io:commons-io:2.6")
    compile("commons-codec:commons-codec:1.12")
    compile("org.apache.commons:commons-lang3:3.11")

    // Jackson
    compile("com.fasterxml.jackson.core:jackson-databind:2.9.8")
    compile("com.fasterxml.jackson.core:jackson-core:2.9.8")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.8")

    // Aliyun
    compile("com.aliyun:aliyun-java-sdk-core:4.4.2")

    // admin
    //compile("de.codecentric:spring-boot-admin-starter-client:2.1.5")

    // test
    testCompile("org.springframework.boot:spring-boot-starter-test:${project.springBootVersion}")
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/app")
}
// println rootProject.projectDir
docker {
    name "${project.group}/tree"
    dockerfile file("${rootProject.projectDir}/scripts/docker/Dockerfile")
    copySpec.from(tasks.unpack.outputs).into("app")
    buildArgs([
        'DEPENDENCY': "app",
        "mainApp": "bodhitree.tree.Application",
        "remoteDebugArgs": remoteDebugArgs
    ])
}

